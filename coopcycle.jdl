/*Entités*/
entity Panier  {
	dateCommande Instant required,
    adresseLivraison String required,
    fraisService Float required min(0),
    netAPayer Integer min(0),
    state State required, 
    datePaiement Instant required,
    methodePaiement PaymentMethod required,
}

enum State {
	NEW, COOKING, READY, DELIVERED
}

enum PaymentMethod {
	CB, Mastercard, Visa, Paypal, Apple Pay, Google Pay, Bitcoin, Izly, Cheque
}
entity Commande {
	quantite Integer required min(0),
    total Float min(0)
}

entity Menu {
	nom String required, 
    description String, 
    prix Float required min(0)
}

entity Client {
	prenom String, 
    nom String required, 
    email String required unique pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/), 
    phoneNumber String unique,
    estDG Boolean,
    estMenbreCA Boolean
}

entity Restaurateur {
	prenom String, 
    nom String required, 
    email String required unique pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/), 
    phoneNumber String required unique, 
    commissions Float min(0),
    estDG Boolean,
    estMenbreCA Boolean 
}

entity Restaurant {
	nom String required, 
    description String, 
    tags String,
    adresse String required,
    fraisLivraison Float required min(0),
    heureOUverture String required,
    heureFermeture String required, 
    evaluation Float min(0)
}


entity Livreur {
	prenom String, 
    nom String required, 
    email String required unique pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/), 
    phoneNumber String required unique, 
    commissions Float min(0),
    evaluation Float min(0),
    estDG Boolean,
    estMenbreCA Boolean
}

entity Cooperative {
	nom String required unique, 
    localisation String required,
    nbAdherents Integer min(0)
}


/*Relations*/
relationship OneToMany {
	Client to Panier{client}
    Panier to Commande{panier}
    Menu to Commande{menu}
    Restaurant to Menu{restaurant}
    Restaurateur to Restaurant{restaurateur}
    Livreur to Panier{livreur}
    Cooperative to Restaurateur{cooperative}
    Cooperative to Client{cooperative}
    Cooperative to Livreur{cooperative}
}

// Ajout du design patern DTO
dto all with mapstruct

// Ajout des options de services à toutes les classes
service * with serviceClass
// Ajout de la pagination
paginate Panier, Client, Restaurateur, Livreur, Menu, Restaurant with pagination